// lib/error_diagnostic.dart
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';

/// Clase para ayudar en el diagn√≥stico de errores de inicializaci√≥n
///
/// Esta clase proporciona m√©todos para probar los casos de uso uno por uno
/// y registrar los resultados
class ErrorDiagnostic {
  static final GetIt sl = GetIt.instance;

  /// Verifica un caso de uso espec√≠fico y registra el resultado
  static bool checkUseCase(String name, Function testFunction) {
    try {
      if (kDebugMode) {
        print('üîç Probando caso de uso: $name');
      }

      // Intentar ejecutar la funci√≥n de prueba
      testFunction();

      if (kDebugMode) {
        print('‚úÖ Caso de uso $name verificado correctamente');
      }
      return true;
    } catch (e, stack) {
      if (kDebugMode) {
        print('‚ùå Error en caso de uso $name: $e');
        print('Stack trace: $stack');
      }
      return false;
    }
  }

  /// Verifica si un caso de uso est√° registrado correctamente
  static bool isUseCaseRegistered(String name, Type type) {
    try {
      if (kDebugMode) {
        print('üîç Verificando registro de caso de uso: $name');
      }

      final bool isRegistered = sl.isRegistered<Object>(instanceName: name) ||
          sl.isRegistered<Type>();

      if (kDebugMode) {
        if (isRegistered) {
          print('‚úÖ Caso de uso $name est√° registrado');
        } else {
          print('‚ùå Caso de uso $name NO est√° registrado');
        }
      }

      return isRegistered;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error verificando registro de $name: $e');
      }
      return false;
    }
  }

  /// Intenta registrar un caso de uso de manera segura
  static bool safeRegisterUseCase(String name, dynamic instance) {
    try {
      if (kDebugMode) {
        print('üîÑ Intentando registrar caso de uso: $name');
      }

      // Verificar si ya est√° registrado
      if (sl.isRegistered<Object>(instanceName: name)) {
        if (kDebugMode) {
          print('‚ö†Ô∏è Caso de uso $name ya est√° registrado, omitiendo');
        }
        return true;
      }

      // Registrar con nombre (m√°s seguro)
      sl.registerSingleton<Object>(instance, instanceName: name);

      if (kDebugMode) {
        print('‚úÖ Caso de uso $name registrado correctamente');
      }
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error registrando caso de uso $name: $e');
      }
      return false;
    }
  }

  /// Ejecuta una serie de pruebas para verificar dependencias b√°sicas
  static Map<String, bool> runDependencyTests() {
    final Map<String, bool> results = {};

    // Verificar servicios b√°sicos
    results['FirebaseServices'] = checkUseCase('Firebase Services', () {
      try {
        GetIt.instance.get(instanceName: 'FirebaseFirestore');
        GetIt.instance.get(instanceName: 'FirebaseAuth');
        GetIt.instance.get(instanceName: 'FirebaseStorage');
      } catch (e) {
        if (kDebugMode) {
          print(
              '‚ö†Ô∏è Firebase services no registrados por nombre, verificando por tipo...');
        }
        // Verificar si est√°n registrados por tipo en su lugar
        GetIt.instance.get<Object>(instanceName: 'FirebaseFirestore');
        GetIt.instance.get<Object>(instanceName: 'FirebaseAuth');
        GetIt.instance.get<Object>(instanceName: 'FirebaseStorage');
      }
    });

    // Agregar m√°s pruebas para otras dependencias b√°sicas

    return results;
  }
}
